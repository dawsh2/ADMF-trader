# simple_risk_manager.py
from src.risk.managers.risk_manager_base import RiskManagerBase
from src.core.events.event_utils import create_order_event
import logging

logger = logging.getLogger(__name__)

class SimpleRiskManager(RiskManagerBase):
    """Simple implementation of a risk manager with fixed position sizing."""
    
    def __init__(self, event_bus, portfolio_manager, name=None):
        """Initialize simple risk manager."""
        super().__init__(event_bus, portfolio_manager, name)
        self.position_size = 100  # Default fixed position size
    
    def on_signal(self, signal_event):
        """
        Handle signal events and create orders.
        
        Args:
            signal_event: Signal event to process
            
        Returns:
            Order event or None
        """
        # Extract signal details
        symbol = signal_event.get_symbol()
        signal_value = signal_event.get_signal_value()
        price = signal_event.get_price()
        timestamp = signal_event.get_timestamp()
        
        # Determine direction from signal
        if signal_value > 0:
            direction = 'BUY'
        elif signal_value < 0:
            direction = 'SELL'
        else:
            # Neutral signal, no action
            return None
        
        # Calculate position size
        size = self.size_position(signal_event)
        
        # Skip if size is zero
        if size == 0:
            logger.info(f"Signal for {symbol} resulted in zero size, skipping")
            return None
        
        # Create order event
        order = create_order_event(
            symbol=symbol,
            order_type='MARKET',  # Default to market orders
            direction=direction,
            quantity=abs(size),  # Quantity is always positive
            price=price,
            timestamp=timestamp
        )
        
        # Emit order event
        if self.event_bus:
            self.event_bus.emit(order)
            logger.info(f"Emitted order: {direction} {abs(size)} {symbol} @ {price:.2f}")
        
        return order
    
    def size_position(self, signal_event):
        """
        Calculate position size for a signal using fixed size.
        
        Args:
            signal_event: Signal event to size
            
        Returns:
            int: Position size (positive or negative)
        """
        signal_value = signal_event.get_signal_value()
        
        # Apply direction to position size
        if signal_value > 0:
            return self.position_size
        elif signal_value < 0:
            return -self.position_size
        else:
            return 0
    
    def configure(self, config):
        """
        Configure the risk manager.
        
        Args:
            config: Configuration dictionary or ConfigSection
        """
        super().configure(config)
        
        # Extract parameters from config
        if hasattr(config, 'as_dict'):
            config_dict = config.as_dict()
        else:
            config_dict = dict(config)
            
        # Set position size if provided
        if 'position_size' in config_dict:
            self.position_size = config_dict['position_size']
