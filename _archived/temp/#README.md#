# ADMF-Trader (Adaptive Decision Making Framework Trader)

A modular, event-driven algorithmic trading system with a component-based architecture designed for strategy development, backtesting, and optimization.

## System Overview

ADMF-Trader is built around a hierarchical component architecture that allows for:

- Compositional strategy design (build complex strategies from simple components)
- Parameter optimization across all levels
- Regime-adaptive trading approaches
- Clean separation of concerns

Module responsibility is divided by transformation of event objects:
```
--> Data (Converts Raw Market Data into 'BarEvents')
--> Strategy (Converts BarEvents into SignalEvents) 
--> Risk (Converts SignalEvents into OrderEvents) 
--> Order Execution (Converts OrderEvents into FillEvents)
```

## Core Architecture Principles

- **Component-Based Design**: All trading elements inherit from a common Component base class
- **Hierarchical Structure**: Clear progression from low-level to high-level components
- **Compositional Approach**: Complex strategies built by combining simpler components
- **Parameter Management**: Unified interface for parameter getting/setting
- **Optimization Support**: Design that facilitates parameter and weight optimization
- **Event-Driven**: Clean event flow between system components

## System Architecture

```
src/
├── core/
│   ├── events/               # Event system
│   ├── config/               # Configuration
│   ├── di/                   # Dependency injection
│   └── utils/                # Common utilities
├── data/
│   ├── sources/              # Data sources
│   ├── transformers/         # Data transformations
│   └── handlers/             # Data handling
├── strategy/
│   ├── components/           # Strategy components
│   │   ├── indicators/       # Technical indicators
│   │   ├── features/         # Feature extraction
│   │   └── rules/            # Trading rules
│   ├── implementations/      # Concrete strategies
│   └── optimization/         # Strategy optimization
├── risk/
│   ├── portfolio/            # Portfolio state
│   │   ├── portfolio.py      # Portfolio management
│   │   └── position.py       # Position tracking
│   └── managers/             # Risk managers
├── execution/
│   ├── broker/               # Broker interfaces
│   ├── backtest/             # Backtesting tools
│   ├── order_registry.py     # Centralized order tracking
│   └── order_manager.py      # Order management
└── analytics/
    ├── metrics/              # Performance metrics
    └── reporting/            # Report generation
```

## Component Hierarchy

```
Component (Base)
├── Indicator
│   ├── MovingAverage
│   ├── RSI
│   ├── MACD
│   └── ...
├── Feature
│   ├── TrendStrength
│   ├── VolatilityLevel
│   ├── SupportResistance
│   └── ...
├── Rule
│   ├── MACrossover
│   ├── RSIThreshold
│   ├── BreakoutRule
│   └── ...
└── Strategy
    ├── BasicStrategy
    ├── CompositeStrategy
    │   └── RegimeStrategy
    └── ...
```

## Key Features

- **Event-driven Architecture**: Clean event flow between system components
- **Centralized Order Registry**: Single source of truth for order state
- **Component Discovery**: Automatic discovery and registration of components
- **Dependency Injection**: Clean component initialization and configuration
- **Regime-adaptive Strategies**: Support for different market regimes
- **Integration with TA-Lib**: Comprehensive technical indicators
- **Optimization with Optuna**: Parameter and weight optimization

## Getting Started

### Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/admf-trader.git
cd admf-trader
```

2. Install dependencies:
```bash
pip install -r requirements.txt
```

### Running the System

The main entry point is `main.py` which provides a clean interface to the system:

```bash
python main.py --config config/backtest.yaml
```

### Configuration

The system is configured using YAML files which define the components, parameters, and execution settings:

```yaml
# Example configuration
strategies:
  ma_crossover:
    class: strategies.composite_strategy.CompositeStrategy
    parameters:
      combination_method: majority
      symbols: ['AAPL', 'MSFT']
      components:
        rule.ma_fast:
          class: strategies.rules.ma_crossover.MACrossoverRule
          parameters:
            fast_window: 10
            slow_window: 20
            price_key: close
            weight: 1.0
```

## Optimization Framework

The system features a modular optimization architecture that allows for sophisticated parameter tuning:

- **Hierarchical Optimization**: Optimize components at different levels independently
- **Multi-Stage Optimization**: Sequential optimization of different component types
- **Regime-Based Optimization**: Per-regime parameter optimization
- **Parameter Space Definition**: Each component defines its own optimization parameter space
- **Integration with Optuna**: Leverages advanced Bayesian optimization techniques
- **Distributed Optimization**: Support for parallel and distributed optimization runs
- **Optimization Persistence**: Save/load optimization studies for continued experimentation

This architecture supports various optimization scenarios:
1. Parameter Optimization for any component
2. Weight Optimization for rules in composite strategies 
3. Regime-Specific Parameter Sets
4. Component Selection
5. Meta-Labeling optimization

### Example: Ensemble Regime Strategy Optimization

The framework makes complex optimization workflows concise and manageable. Here's an example of an ensemble regime strategy optimization:

```python
# 1. Setup regime detector and base rules
volatility_regime = VolatilityRegimeDetector(lookback=50, threshold=0.02)
trend_regime = TrendRegimeDetector(ma_period=100, threshold=0.01)

# Define rules to use in our strategy
rules = [
    MACrossoverRule(name="ma_fast", parameters={"fast_window": 10, "slow_window": 30}),
    RSIRule(name="rsi", parameters={"period": 14, "overbought": 70, "oversold": 30}),
    BreakoutRule(name="breakout", parameters={"lookback": 20, "threshold": 1.5})
]

# 2. Create composite strategy with regime adaptation
strategy = RegimeStrategy(event_bus, data_handler)
strategy.set_regime_detector(volatility_regime)
for rule in rules:
    strategy.add_rule(rule)

# 3. Optimize rule parameters independently (within each regime)
optimizer = RegimeOptimizer(strategy, data_handler, performance_calculator, volatility_regime)

# Detect regimes in historical data
regimes = optimizer.detect_regimes(historical_data)

# Create optimizers for each regime
optimizer.create_optimizers(regimes, metric='sharpe_ratio')

# Run optimization (each regime optimized independently)
regime_params = optimizer.optimize_regimes(n_trials=100)

# 4. Apply optimized parameters per regime
optimizer.configure_regime_strategy(regime_params)

# 5. Optimize rule weights per regime
weight_optimizer = RegimeWeightOptimizer(strategy, data_handler, performance_calculator)
weight_optimizer.optimize(n_trials=50)

# 6. Final validation on out-of-sample data
results = backtest.run(
    strategy=strategy,
    start_date='2022-01-01',
    end_date='2023-01-01',
    symbols=['AAPL', 'MSFT', 'GOOG']
)

# Results show performance with regime-specific parameters and weights
print(f"Sharpe Ratio: {results['metrics']['sharpe_ratio']}")
print(f"Max Drawdown: {results['metrics']['max_drawdown']}")
```

In this example, the framework handles:
- Automatic parameter space definition for each rule
- Independent optimization of parameters under different market regimes
- Optimization of rule weights to find the optimal ensemble
- All with clean, readable code and minimal boilerplate

## Next Steps

1. **Complete Optimization Framework**: Finish implementation of advanced optimization techniques
2. **Options Spread Trading**: Implement options spread trading capabilities
3. **Reinforcement Learning**: Integrate RL agents for strategy development
4. **Live Trading**: Implement paper trading and production interfaces
5. **Visualization System**: Build standard performance charts and reporting
6. **Alternative Data**: Explore integration with alternative data sources

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
