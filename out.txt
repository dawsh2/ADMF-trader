2025-05-08 11:21:14,693 - __main__ - INFO - Examining data file: data/HEAD_1min.csv
================================================================================
ADMF-Trader Optimization Debug Script
================================================================================

Data file: data/HEAD_1min.csv
Shape: (999, 8)
Columns: ['timestamp', 'Open', 'High', 'Low', 'Close', 'Volume', 'trade_count', 'vwap']
Date range: 2024-03-26 13:30:00 to 2024-03-28 17:06:00
WARNING: Missing required columns: ['open', 'high', 'low', 'close', 'volume']

Checking for data issues...
WARNING: Found 1998 missing values:
  trade_count: 999 missing values
  vwap: 999 missing values

Sample data:
             timestamp    Open    High  ...  Volume  trade_count  vwap
0  2024-03-26 13:30:00  521.23  521.26  ...  342898          NaN   NaN
1  2024-03-26 13:31:00  521.03  521.11  ...  186082          NaN   NaN
2  2024-03-26 13:32:00  521.05  521.32  ...  144430          NaN   NaN
3  2024-03-26 13:33:00  521.23  521.36  ...  120104          NaN   NaN
4  2024-03-26 13:34:00  521.30  521.44  ...   95387          NaN   NaN

[5 rows x 8 columns]

Examining strategy file: src/strategy/implementations/simple_ma_crossover.py
"""
Simple Moving Average Crossover Strategy implementation.

This strategy generates buy signals when a fast moving average crosses above
a slow moving average, and sell signals when the fast MA crosses below the slow MA.
"""

import numpy as np
import pandas as pd
from src.core.component import Component
from src.core.event_bus import Event, EventType

class SimpleMACrossoverStrategy(Component):
    """
    Simple Moving Average Crossover Strategy.
    
    This class implements a simple moving average crossover strategy
    that is fully compatible with the optimizer.
    """
    
    # Flag to identify this as a strategy
    is_strategy = True
    
    def __init__(self, name, fast_period=10, slow_period=30, position_size=100, 
                use_trailing_stop=False, stop_loss_pct=0.05):
        """
        Initialize the strategy.
        
        Args:
            name (str): Component name
            fast_period (int): Fast moving average period
            slow_period (int): Slow moving average period
            position_size (float): Position size in shares
            use_trailing_stop (bool): Whether to use trailing stop
            stop_loss_pct (float): Stop loss percentage
        """
        super().__init__(name)
        self.fast_period = fast_period
        self.slow_period = slow_period
        self.position_size = position_size
        self.use_trailing_stop = use_trailing_stop
        self.stop_loss_pct = stop_loss_pct
        
        # Internal data
        self.prices = {}  # symbol -> list of prices
        self.positions = {}  # symbol -> current position
        self.trailing_stops = {}  # symbol -> trailing stop level
        
    def initialize(self, context):
        """
        Initialize with dependencies.
        
        Args:
            context (dict): Context containing dependencies
        """
        super().initialize(context)
        
        # Get event bus from context
        self.event_bus = context.get('event_bus')
        
        if not self.event_bus:
            raise ValueError("Strategy requires event_bus in context")
            
        # Subscribe to events
        self.event_bus.subscribe(EventType.BAR, self.on_bar)
        self.event_bus.subscribe(EventType.PORTFOLIO_UPDATE, self.on_portfolio_update)
        
    def reset(self):
        """Reset the strategy state."""
        super().reset()
        self.prices = {}
        self.positions = {}
        self.trailing_stops = {}
        
    def on_bar(self, event):
        """
        Handle bar events by updating indicators and generating signals.
        
        Args:
            event (Event): Bar event
        """
        # Extract bar data
        bar_data = event.get_data()
        symbol = bar_data.get('symbol')
        close_price = bar_data.get('close')
        timestamp = bar_data.get('timestamp')
        
        # Initialize data structures for this symbol if needed
        if symbol not in self.prices:
            self.prices[symbol] = []
            self.positions[symbol] = 0
            
        # Add price to history
        self.prices[symbol].append(close_price)
        
        # Wait until we have enough data
        if len(self.prices[symbol]) < self.slow_period:
            return
            
        # Calculate moving averages
        fast_ma = np.mean(self.prices[symbol][-self.fast_period:])
        slow_ma = np.mean(self.prices[symbol][-self.slow_period:])
        
        # Previous moving averages
        prev_prices = self.prices[symbol][:-1]
        prev_fast_ma = np.mean(prev_prices[-self.fast_period:]) if len(prev_prices) >= self.fast_period else None
        prev_slow_ma = np.mean(prev_prices[-self.slow_period:]) if len(prev_prices) >= self.slow_period else None
        
        # Check for crossover (if we have previous values)
        if prev_fast_ma is not None and prev_slow_ma is not None:
            # Long signal: fast MA crosses above slow MA
            if prev_fast_ma <= prev_slow_ma and fast_ma > slow_ma:
                # Only enter if not already long
                if self.positions[symbol] <= 0:
                    self._generate_signal(symbol, 'LONG', close_price, timestamp)
                    
            # Short signal: fast MA crosses below slow MA
            elif prev_fast_ma >= prev_slow_ma and fast_ma < slow_ma:
                # Only enter if not already short
                if self.positions[symbol] >= 0:
                    self._generate_signal(symbol, 'SHORT', close_price, timestamp)
                    
        # Check trailing stops if active
        if self.use_trailing_stop and symbol in self.trailing_stops:
            if self.positions[symbol] > 0:  # Long position
                # Update trailing stop
                self.trailing_stops[symbol] = max(
                    self.trailing_stops[symbol],
                    close_price * (1 - self.stop_loss_pct)
                )
                
                # Check if stop is hit
                if close_price < self.trailing_stops[symbol]:
                    self._generate_signal(symbol, 'SHORT', close_price, timestamp)
                    
            elif self.positions[symbol] < 0:  # Short position
                # Update trailing stop
                self.trailing_stops[symbol] = min(
                    self.trailing_stops[symbol],
                    close_price * (1 + self.stop_loss_pct)
                )
                
                # Check if stop is hit
                if close_price > self.trailing_stops[symbol]:
                    self._generate_signal(symbol, 'LONG', close_price, timestamp)
                    
    def on_portfolio_update(self, event):
        """
        Handle portfolio update events by tracking positions.
        
        Args:
            event (Event): Portfolio update event
        """
        portfolio_data = event.get_data()
        positions = portfolio_data.get('positions', {})
        
        # Update positions
        for symbol, position in positions.items():
            self.positions[symbol] = position
            
    def _generate_signal(self, symbol, direction, price, timestamp):
        """
        Generate a trading signal.
        
        Args:
            symbol (str): Instrument symbol
            direction (str): Signal direction ('LONG' or 'SHORT')
            price (float): Current price
            timestamp (datetime): Signal timestamp
        """
        # Calculate quantity based on position size and current position
        quantity = self.position_size
        if direction == 'SHORT' and self.positions.get(symbol, 0) > 0:
            # Closing long position
            quantity = abs(self.positions.get(symbol, 0))
        elif direction == 'LONG' and self.positions.get(symbol, 0) < 0:
            # Closing short position
            quantity = abs(self.positions.get(symbol, 0))
            
        # Create signal data
        signal_data = {
            'symbol': symbol,
            'direction': direction,
            'quantity': quantity,
            'price': price,
            'timestamp': timestamp,
            'order_type': 'MARKET'
        }
        
        # Publish signal event
        self.event_bus.publish(Event(
            EventType.SIGNAL,
            signal_data
        ))
        
        # Set up trailing stop if entering new position
        if self.use_trailing_stop:
            if direction == 'LONG':
                self.trailing_stops[symbol] = price * (1 - self.stop_loss_pct)
            elif direction == 'SHORT':
                self.trailing_stops[symbol] = price * (1 + self.stop_loss_pct)
2025-05-08 11:21:14,726 - __main__ - INFO - Testing strategy with parameters: {'fast_period': 5, 'slow_period': 20}
2025-05-08 11:21:14,727 - src.strategy.strategy_factory - INFO - Discovered strategy: simple_ma_crossover from ma_crossover_strategy.SimpleMACrossoverStrategy
2025-05-08 11:21:14,727 - src.strategy.strategy_factory - INFO - Discovered strategy: regime_ensemble from regime_ensemble_strategy.RegimeEnsembleStrategy
2025-05-08 11:21:14,728 - src.strategy.strategy_factory - INFO - Discovered strategy: composite_regime from composite_regime_strategy.CompositeRegimeStrategy
2025-05-08 11:21:14,728 - src.strategy.strategy_factory - INFO - Discovered strategy: simple_ma_crossover from simple_ma_crossover.SimpleMACrossoverStrategy
2025-05-08 11:21:14,728 - src.strategy.strategy_factory - INFO - Discovered strategy: ensemble from ensemble_strategy.EnsembleStrategy
2025-05-08 11:21:14,728 - src.strategy.strategy_factory - INFO - Discovered strategy: ma_crossover from ma_crossover.MACrossoverStrategy
2025-05-08 11:21:14,728 - src.strategy.strategy_factory - INFO - Discovered strategy: mean_reversion from mean_reversion.MeanReversionStrategy
2025-05-08 11:21:14,729 - src.strategy.strategy_factory - INFO - Discovered strategy: ma_crossover from backup.ma_crossover.MACrossoverStrategy
2025-05-08 11:21:14,729 - src.strategy.strategy_factory - INFO - Discovered strategy: ma_crossover from backup.ma_crossover_fixed.MACrossoverStrategy
2025-05-08 11:21:14,734 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.955, 'timestamp': Timestamp('2024-03-26 13:54:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,734 - __main__ - DEBUG - ORDER: {'id': 'order_1', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 13:54:00'), 'price': 520.955}
2025-05-08 11:21:14,734 - __main__ - DEBUG - FILL: {'id': 'fill_order_1', 'order_id': 'order_1', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.0069, 'timestamp': Timestamp('2024-03-26 13:53:00'), 'commission': 52.10068999999999}
2025-05-08 11:21:14,735 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.14, 'timestamp': Timestamp('2024-03-26 13:58:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,735 - __main__ - DEBUG - ORDER: {'id': 'order_2', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 13:58:00'), 'price': 521.14}
2025-05-08 11:21:14,735 - __main__ - DEBUG - FILL: {'id': 'fill_order_2', 'order_id': 'order_2', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.125, 'timestamp': Timestamp('2024-03-26 13:57:00'), 'commission': 52.112500000000004}
2025-05-08 11:21:14,736 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.33, 'timestamp': Timestamp('2024-03-26 14:14:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,736 - __main__ - DEBUG - ORDER: {'id': 'order_3', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 14:14:00'), 'price': 521.33}
2025-05-08 11:21:14,736 - __main__ - DEBUG - FILL: {'id': 'fill_order_3', 'order_id': 'order_3', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.3001, 'timestamp': Timestamp('2024-03-26 14:13:00'), 'commission': 52.130010000000006}
2025-05-08 11:21:14,736 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.275, 'timestamp': Timestamp('2024-03-26 14:15:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,736 - __main__ - DEBUG - ORDER: {'id': 'order_4', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 14:15:00'), 'price': 521.275}
2025-05-08 11:21:14,736 - __main__ - DEBUG - FILL: {'id': 'fill_order_4', 'order_id': 'order_4', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.33, 'timestamp': Timestamp('2024-03-26 14:14:00'), 'commission': 52.13300000000001}
2025-05-08 11:21:14,737 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.19, 'timestamp': Timestamp('2024-03-26 14:28:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,737 - __main__ - DEBUG - ORDER: {'id': 'order_5', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 14:28:00'), 'price': 521.19}
2025-05-08 11:21:14,737 - __main__ - DEBUG - FILL: {'id': 'fill_order_5', 'order_id': 'order_5', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.2, 'timestamp': Timestamp('2024-03-26 14:27:00'), 'commission': 52.12000000000001}
2025-05-08 11:21:14,738 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.175, 'timestamp': Timestamp('2024-03-26 14:43:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,738 - __main__ - DEBUG - ORDER: {'id': 'order_6', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 14:43:00'), 'price': 521.175}
2025-05-08 11:21:14,738 - __main__ - DEBUG - FILL: {'id': 'fill_order_6', 'order_id': 'order_6', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.06, 'timestamp': Timestamp('2024-03-26 14:42:00'), 'commission': 52.105999999999995}
2025-05-08 11:21:14,739 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.08, 'timestamp': Timestamp('2024-03-26 14:52:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,739 - __main__ - DEBUG - ORDER: {'id': 'order_7', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 14:52:00'), 'price': 521.08}
2025-05-08 11:21:14,739 - __main__ - DEBUG - FILL: {'id': 'fill_order_7', 'order_id': 'order_7', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.09, 'timestamp': Timestamp('2024-03-26 14:51:00'), 'commission': 52.109}
2025-05-08 11:21:14,739 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.13, 'timestamp': Timestamp('2024-03-26 14:53:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,739 - __main__ - DEBUG - ORDER: {'id': 'order_8', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 14:53:00'), 'price': 521.13}
2025-05-08 11:21:14,739 - __main__ - DEBUG - FILL: {'id': 'fill_order_8', 'order_id': 'order_8', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.08, 'timestamp': Timestamp('2024-03-26 14:52:00'), 'commission': 52.10800000000001}
2025-05-08 11:21:14,740 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.215, 'timestamp': Timestamp('2024-03-26 15:14:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,740 - __main__ - DEBUG - ORDER: {'id': 'order_9', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 15:14:00'), 'price': 521.215}
2025-05-08 11:21:14,740 - __main__ - DEBUG - FILL: {'id': 'fill_order_9', 'order_id': 'order_9', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.2, 'timestamp': Timestamp('2024-03-26 15:13:00'), 'commission': 52.12000000000001}
2025-05-08 11:21:14,741 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.285, 'timestamp': Timestamp('2024-03-26 15:21:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,741 - __main__ - DEBUG - ORDER: {'id': 'order_10', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 15:21:00'), 'price': 521.285}
2025-05-08 11:21:14,741 - __main__ - DEBUG - FILL: {'id': 'fill_order_10', 'order_id': 'order_10', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.1801, 'timestamp': Timestamp('2024-03-26 15:20:00'), 'commission': 52.118010000000005}
2025-05-08 11:21:14,742 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.285, 'timestamp': Timestamp('2024-03-26 15:33:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,742 - __main__ - DEBUG - ORDER: {'id': 'order_11', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 15:33:00'), 'price': 521.285}
2025-05-08 11:21:14,742 - __main__ - DEBUG - FILL: {'id': 'fill_order_11', 'order_id': 'order_11', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.24, 'timestamp': Timestamp('2024-03-26 15:32:00'), 'commission': 52.124}
2025-05-08 11:21:14,743 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.3601, 'timestamp': Timestamp('2024-03-26 15:51:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,743 - __main__ - DEBUG - ORDER: {'id': 'order_12', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 15:51:00'), 'price': 521.3601}
2025-05-08 11:21:14,743 - __main__ - DEBUG - FILL: {'id': 'fill_order_12', 'order_id': 'order_12', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.28, 'timestamp': Timestamp('2024-03-26 15:50:00'), 'commission': 52.128}
2025-05-08 11:21:14,744 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.2, 'timestamp': Timestamp('2024-03-26 16:05:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,744 - __main__ - DEBUG - ORDER: {'id': 'order_13', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 16:05:00'), 'price': 521.2}
2025-05-08 11:21:14,744 - __main__ - DEBUG - FILL: {'id': 'fill_order_13', 'order_id': 'order_13', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.23, 'timestamp': Timestamp('2024-03-26 16:04:00'), 'commission': 52.123}
2025-05-08 11:21:14,746 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.0779, 'timestamp': Timestamp('2024-03-26 16:31:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,746 - __main__ - DEBUG - ORDER: {'id': 'order_14', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 16:31:00'), 'price': 521.0779}
2025-05-08 11:21:14,746 - __main__ - DEBUG - FILL: {'id': 'fill_order_14', 'order_id': 'order_14', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.09, 'timestamp': Timestamp('2024-03-26 16:30:00'), 'commission': 52.109}
2025-05-08 11:21:14,746 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.97, 'timestamp': Timestamp('2024-03-26 16:34:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,746 - __main__ - DEBUG - ORDER: {'id': 'order_15', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 16:34:00'), 'price': 520.97}
2025-05-08 11:21:14,746 - __main__ - DEBUG - FILL: {'id': 'fill_order_15', 'order_id': 'order_15', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.0199, 'timestamp': Timestamp('2024-03-26 16:33:00'), 'commission': 52.10199}
2025-05-08 11:21:14,747 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.017, 'timestamp': Timestamp('2024-03-26 16:50:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,747 - __main__ - DEBUG - ORDER: {'id': 'order_16', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 16:50:00'), 'price': 521.017}
2025-05-08 11:21:14,747 - __main__ - DEBUG - FILL: {'id': 'fill_order_16', 'order_id': 'order_16', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.96, 'timestamp': Timestamp('2024-03-26 16:49:00'), 'commission': 52.096000000000004}
2025-05-08 11:21:14,747 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.885, 'timestamp': Timestamp('2024-03-26 16:53:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,747 - __main__ - DEBUG - ORDER: {'id': 'order_17', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 16:53:00'), 'price': 520.885}
2025-05-08 11:21:14,747 - __main__ - DEBUG - FILL: {'id': 'fill_order_17', 'order_id': 'order_17', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.875, 'timestamp': Timestamp('2024-03-26 16:52:00'), 'commission': 52.0875}
2025-05-08 11:21:14,748 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.9901, 'timestamp': Timestamp('2024-03-26 17:07:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,748 - __main__ - DEBUG - ORDER: {'id': 'order_18', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 17:07:00'), 'price': 520.9901}
2025-05-08 11:21:14,748 - __main__ - DEBUG - FILL: {'id': 'fill_order_18', 'order_id': 'order_18', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.99, 'timestamp': Timestamp('2024-03-26 17:06:00'), 'commission': 52.099000000000004}
2025-05-08 11:21:14,749 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.825, 'timestamp': Timestamp('2024-03-26 17:19:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,749 - __main__ - DEBUG - ORDER: {'id': 'order_19', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 17:19:00'), 'price': 520.825}
2025-05-08 11:21:14,749 - __main__ - DEBUG - FILL: {'id': 'fill_order_19', 'order_id': 'order_19', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.83, 'timestamp': Timestamp('2024-03-26 17:18:00'), 'commission': 52.083000000000006}
2025-05-08 11:21:14,750 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.9151, 'timestamp': Timestamp('2024-03-26 17:31:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,750 - __main__ - DEBUG - ORDER: {'id': 'order_20', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 17:31:00'), 'price': 520.9151}
2025-05-08 11:21:14,750 - __main__ - DEBUG - FILL: {'id': 'fill_order_20', 'order_id': 'order_20', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.92, 'timestamp': Timestamp('2024-03-26 17:30:00'), 'commission': 52.09199999999999}
2025-05-08 11:21:14,751 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.81, 'timestamp': Timestamp('2024-03-26 17:40:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,751 - __main__ - DEBUG - ORDER: {'id': 'order_21', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 17:40:00'), 'price': 520.81}
2025-05-08 11:21:14,751 - __main__ - DEBUG - FILL: {'id': 'fill_order_21', 'order_id': 'order_21', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.804, 'timestamp': Timestamp('2024-03-26 17:39:00'), 'commission': 52.0804}
2025-05-08 11:21:14,752 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.725, 'timestamp': Timestamp('2024-03-26 17:57:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,752 - __main__ - DEBUG - ORDER: {'id': 'order_22', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 17:57:00'), 'price': 520.725}
2025-05-08 11:21:14,752 - __main__ - DEBUG - FILL: {'id': 'fill_order_22', 'order_id': 'order_22', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.76, 'timestamp': Timestamp('2024-03-26 17:56:00'), 'commission': 52.076}
2025-05-08 11:21:14,753 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.81, 'timestamp': Timestamp('2024-03-26 18:13:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,753 - __main__ - DEBUG - ORDER: {'id': 'order_23', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 18:13:00'), 'price': 520.81}
2025-05-08 11:21:14,753 - __main__ - DEBUG - FILL: {'id': 'fill_order_23', 'order_id': 'order_23', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.7388, 'timestamp': Timestamp('2024-03-26 18:12:00'), 'commission': 52.073879999999996}
2025-05-08 11:21:14,753 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.9099, 'timestamp': Timestamp('2024-03-26 18:15:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,753 - __main__ - DEBUG - ORDER: {'id': 'order_24', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 18:15:00'), 'price': 520.9099}
2025-05-08 11:21:14,753 - __main__ - DEBUG - FILL: {'id': 'fill_order_24', 'order_id': 'order_24', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.85, 'timestamp': Timestamp('2024-03-26 18:14:00'), 'commission': 52.085}
2025-05-08 11:21:14,755 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.8, 'timestamp': Timestamp('2024-03-26 18:40:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,755 - __main__ - DEBUG - ORDER: {'id': 'order_25', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 18:40:00'), 'price': 520.8}
2025-05-08 11:21:14,755 - __main__ - DEBUG - FILL: {'id': 'fill_order_25', 'order_id': 'order_25', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.7999, 'timestamp': Timestamp('2024-03-26 18:39:00'), 'commission': 52.07999}
2025-05-08 11:21:14,756 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.83, 'timestamp': Timestamp('2024-03-26 18:54:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,756 - __main__ - DEBUG - ORDER: {'id': 'order_26', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 18:54:00'), 'price': 520.83}
2025-05-08 11:21:14,756 - __main__ - DEBUG - FILL: {'id': 'fill_order_26', 'order_id': 'order_26', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.84, 'timestamp': Timestamp('2024-03-26 18:53:00'), 'commission': 52.084}
2025-05-08 11:21:14,756 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.77, 'timestamp': Timestamp('2024-03-26 19:04:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,757 - __main__ - DEBUG - ORDER: {'id': 'order_27', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-26 19:04:00'), 'price': 520.77}
2025-05-08 11:21:14,757 - __main__ - DEBUG - FILL: {'id': 'fill_order_27', 'order_id': 'order_27', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.77, 'timestamp': Timestamp('2024-03-26 19:03:00'), 'commission': 52.077}
2025-05-08 11:21:14,760 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 521.52, 'timestamp': Timestamp('2024-03-27 13:30:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,760 - __main__ - DEBUG - ORDER: {'id': 'order_28', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 13:30:00'), 'price': 521.52}
2025-05-08 11:21:14,760 - __main__ - DEBUG - FILL: {'id': 'fill_order_28', 'order_id': 'order_28', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.13, 'timestamp': Timestamp('2024-03-26 20:00:00'), 'commission': 51.913000000000004}
2025-05-08 11:21:14,762 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.03, 'timestamp': Timestamp('2024-03-27 13:54:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,762 - __main__ - DEBUG - ORDER: {'id': 'order_29', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 13:54:00'), 'price': 521.03}
2025-05-08 11:21:14,762 - __main__ - DEBUG - FILL: {'id': 'fill_order_29', 'order_id': 'order_29', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 521.315, 'timestamp': Timestamp('2024-03-27 13:53:00'), 'commission': 52.13150000000001}
2025-05-08 11:21:14,763 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.285, 'timestamp': Timestamp('2024-03-27 14:18:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,763 - __main__ - DEBUG - ORDER: {'id': 'order_30', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 14:18:00'), 'price': 520.285}
2025-05-08 11:21:14,763 - __main__ - DEBUG - FILL: {'id': 'fill_order_30', 'order_id': 'order_30', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.29, 'timestamp': Timestamp('2024-03-27 14:17:00'), 'commission': 52.029}
2025-05-08 11:21:14,764 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.88, 'timestamp': Timestamp('2024-03-27 14:23:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,764 - __main__ - DEBUG - ORDER: {'id': 'order_31', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 14:23:00'), 'price': 519.88}
2025-05-08 11:21:14,764 - __main__ - DEBUG - FILL: {'id': 'fill_order_31', 'order_id': 'order_31', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.89, 'timestamp': Timestamp('2024-03-27 14:22:00'), 'commission': 51.989000000000004}
2025-05-08 11:21:14,765 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.194, 'timestamp': Timestamp('2024-03-27 14:34:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,765 - __main__ - DEBUG - ORDER: {'id': 'order_32', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 14:34:00'), 'price': 520.194}
2025-05-08 11:21:14,765 - __main__ - DEBUG - FILL: {'id': 'fill_order_32', 'order_id': 'order_32', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.1961, 'timestamp': Timestamp('2024-03-27 14:33:00'), 'commission': 52.01961}
2025-05-08 11:21:14,765 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.05, 'timestamp': Timestamp('2024-03-27 14:45:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,765 - __main__ - DEBUG - ORDER: {'id': 'order_33', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 14:45:00'), 'price': 520.05}
2025-05-08 11:21:14,765 - __main__ - DEBUG - FILL: {'id': 'fill_order_33', 'order_id': 'order_33', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.935, 'timestamp': Timestamp('2024-03-27 14:44:00'), 'commission': 51.99349999999999}
2025-05-08 11:21:14,767 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.86, 'timestamp': Timestamp('2024-03-27 15:01:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,767 - __main__ - DEBUG - ORDER: {'id': 'order_34', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:01:00'), 'price': 519.86}
2025-05-08 11:21:14,767 - __main__ - DEBUG - FILL: {'id': 'fill_order_34', 'order_id': 'order_34', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.91, 'timestamp': Timestamp('2024-03-27 15:00:00'), 'commission': 51.991}
2025-05-08 11:21:14,767 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.8201, 'timestamp': Timestamp('2024-03-27 15:03:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,767 - __main__ - DEBUG - ORDER: {'id': 'order_35', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:03:00'), 'price': 519.8201}
2025-05-08 11:21:14,767 - __main__ - DEBUG - FILL: {'id': 'fill_order_35', 'order_id': 'order_35', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.7985, 'timestamp': Timestamp('2024-03-27 15:02:00'), 'commission': 51.97985}
2025-05-08 11:21:14,767 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.85, 'timestamp': Timestamp('2024-03-27 15:04:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,767 - __main__ - DEBUG - ORDER: {'id': 'order_36', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:04:00'), 'price': 519.85}
2025-05-08 11:21:14,767 - __main__ - DEBUG - FILL: {'id': 'fill_order_36', 'order_id': 'order_36', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.8201, 'timestamp': Timestamp('2024-03-27 15:03:00'), 'commission': 51.98201}
2025-05-08 11:21:14,767 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.835, 'timestamp': Timestamp('2024-03-27 15:05:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,767 - __main__ - DEBUG - ORDER: {'id': 'order_37', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:05:00'), 'price': 519.835}
2025-05-08 11:21:14,767 - __main__ - DEBUG - FILL: {'id': 'fill_order_37', 'order_id': 'order_37', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.85, 'timestamp': Timestamp('2024-03-27 15:04:00'), 'commission': 51.985}
2025-05-08 11:21:14,767 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.925, 'timestamp': Timestamp('2024-03-27 15:07:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,767 - __main__ - DEBUG - ORDER: {'id': 'order_38', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:07:00'), 'price': 519.925}
2025-05-08 11:21:14,767 - __main__ - DEBUG - FILL: {'id': 'fill_order_38', 'order_id': 'order_38', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.775, 'timestamp': Timestamp('2024-03-27 15:06:00'), 'commission': 51.9775}
2025-05-08 11:21:14,769 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.91, 'timestamp': Timestamp('2024-03-27 15:25:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,769 - __main__ - DEBUG - ORDER: {'id': 'order_39', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:25:00'), 'price': 519.91}
2025-05-08 11:21:14,769 - __main__ - DEBUG - FILL: {'id': 'fill_order_39', 'order_id': 'order_39', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.88, 'timestamp': Timestamp('2024-03-27 15:24:00'), 'commission': 51.988}
2025-05-08 11:21:14,769 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.98, 'timestamp': Timestamp('2024-03-27 15:26:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,769 - __main__ - DEBUG - ORDER: {'id': 'order_40', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:26:00'), 'price': 519.98}
2025-05-08 11:21:14,769 - __main__ - DEBUG - FILL: {'id': 'fill_order_40', 'order_id': 'order_40', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.91, 'timestamp': Timestamp('2024-03-27 15:25:00'), 'commission': 51.991}
2025-05-08 11:21:14,769 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.99, 'timestamp': Timestamp('2024-03-27 15:27:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,769 - __main__ - DEBUG - ORDER: {'id': 'order_41', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:27:00'), 'price': 519.99}
2025-05-08 11:21:14,769 - __main__ - DEBUG - FILL: {'id': 'fill_order_41', 'order_id': 'order_41', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.98, 'timestamp': Timestamp('2024-03-27 15:26:00'), 'commission': 51.998}
2025-05-08 11:21:14,770 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.855, 'timestamp': Timestamp('2024-03-27 15:39:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,770 - __main__ - DEBUG - ORDER: {'id': 'order_42', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:39:00'), 'price': 519.855}
2025-05-08 11:21:14,770 - __main__ - DEBUG - FILL: {'id': 'fill_order_42', 'order_id': 'order_42', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.905, 'timestamp': Timestamp('2024-03-27 15:38:00'), 'commission': 51.990500000000004}
2025-05-08 11:21:14,771 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.82, 'timestamp': Timestamp('2024-03-27 15:53:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,771 - __main__ - DEBUG - ORDER: {'id': 'order_43', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 15:53:00'), 'price': 519.82}
2025-05-08 11:21:14,771 - __main__ - DEBUG - FILL: {'id': 'fill_order_43', 'order_id': 'order_43', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.82, 'timestamp': Timestamp('2024-03-27 15:52:00'), 'commission': 51.982000000000006}
2025-05-08 11:21:14,772 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.815, 'timestamp': Timestamp('2024-03-27 16:18:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,772 - __main__ - DEBUG - ORDER: {'id': 'order_44', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 16:18:00'), 'price': 519.815}
2025-05-08 11:21:14,772 - __main__ - DEBUG - FILL: {'id': 'fill_order_44', 'order_id': 'order_44', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 519.71, 'timestamp': Timestamp('2024-03-27 16:17:00'), 'commission': 51.971000000000004}
2025-05-08 11:21:14,775 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.17, 'timestamp': Timestamp('2024-03-27 17:00:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,775 - __main__ - DEBUG - ORDER: {'id': 'order_45', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 17:00:00'), 'price': 520.17}
2025-05-08 11:21:14,775 - __main__ - DEBUG - FILL: {'id': 'fill_order_45', 'order_id': 'order_45', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.3099, 'timestamp': Timestamp('2024-03-27 16:59:00'), 'commission': 52.030989999999996}
2025-05-08 11:21:14,776 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.21, 'timestamp': Timestamp('2024-03-27 17:18:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,776 - __main__ - DEBUG - ORDER: {'id': 'order_46', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 17:18:00'), 'price': 520.21}
2025-05-08 11:21:14,776 - __main__ - DEBUG - FILL: {'id': 'fill_order_46', 'order_id': 'order_46', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.2, 'timestamp': Timestamp('2024-03-27 17:17:00'), 'commission': 52.02000000000001}
2025-05-08 11:21:14,778 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.34, 'timestamp': Timestamp('2024-03-27 17:37:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,778 - __main__ - DEBUG - ORDER: {'id': 'order_47', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 17:37:00'), 'price': 520.34}
2025-05-08 11:21:14,778 - __main__ - DEBUG - FILL: {'id': 'fill_order_47', 'order_id': 'order_47', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.3301, 'timestamp': Timestamp('2024-03-27 17:36:00'), 'commission': 52.033010000000004}
2025-05-08 11:21:14,780 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.245, 'timestamp': Timestamp('2024-03-27 18:13:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,780 - __main__ - DEBUG - ORDER: {'id': 'order_48', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 18:13:00'), 'price': 520.245}
2025-05-08 11:21:14,780 - __main__ - DEBUG - FILL: {'id': 'fill_order_48', 'order_id': 'order_48', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.13, 'timestamp': Timestamp('2024-03-27 18:12:00'), 'commission': 52.013}
2025-05-08 11:21:14,782 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.54, 'timestamp': Timestamp('2024-03-27 18:35:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,782 - __main__ - DEBUG - ORDER: {'id': 'order_49', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 18:35:00'), 'price': 520.54}
2025-05-08 11:21:14,782 - __main__ - DEBUG - FILL: {'id': 'fill_order_49', 'order_id': 'order_49', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.61, 'timestamp': Timestamp('2024-03-27 18:34:00'), 'commission': 52.061}
2025-05-08 11:21:14,784 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.428, 'timestamp': Timestamp('2024-03-27 19:04:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,784 - __main__ - DEBUG - ORDER: {'id': 'order_50', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 19:04:00'), 'price': 520.428}
2025-05-08 11:21:14,784 - __main__ - DEBUG - FILL: {'id': 'fill_order_50', 'order_id': 'order_50', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.45, 'timestamp': Timestamp('2024-03-27 19:03:00'), 'commission': 52.04500000000001}
2025-05-08 11:21:14,784 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 519.98, 'timestamp': Timestamp('2024-03-27 19:11:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,784 - __main__ - DEBUG - ORDER: {'id': 'order_51', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 19:11:00'), 'price': 519.98}
2025-05-08 11:21:14,784 - __main__ - DEBUG - FILL: {'id': 'fill_order_51', 'order_id': 'order_51', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 520.01, 'timestamp': Timestamp('2024-03-27 19:10:00'), 'commission': 52.001}
2025-05-08 11:21:14,785 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.5005, 'timestamp': Timestamp('2024-03-27 19:24:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,785 - __main__ - DEBUG - ORDER: {'id': 'order_52', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-27 19:24:00'), 'price': 520.5005}
2025-05-08 11:21:14,785 - __main__ - DEBUG - FILL: {'id': 'fill_order_52', 'order_id': 'order_52', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 520.38, 'timestamp': Timestamp('2024-03-27 19:23:00'), 'commission': 52.038000000000004}
2025-05-08 11:21:14,790 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.24, 'timestamp': Timestamp('2024-03-28 13:59:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,790 - __main__ - DEBUG - ORDER: {'id': 'order_53', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 13:59:00'), 'price': 523.24}
2025-05-08 11:21:14,790 - __main__ - DEBUG - FILL: {'id': 'fill_order_53', 'order_id': 'order_53', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.24, 'timestamp': Timestamp('2024-03-28 13:58:00'), 'commission': 52.324}
2025-05-08 11:21:14,790 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.63, 'timestamp': Timestamp('2024-03-28 14:02:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,790 - __main__ - DEBUG - ORDER: {'id': 'order_54', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 14:02:00'), 'price': 523.63}
2025-05-08 11:21:14,790 - __main__ - DEBUG - FILL: {'id': 'fill_order_54', 'order_id': 'order_54', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.485, 'timestamp': Timestamp('2024-03-28 14:01:00'), 'commission': 52.3485}
2025-05-08 11:21:14,790 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.25, 'timestamp': Timestamp('2024-03-28 14:09:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,790 - __main__ - DEBUG - ORDER: {'id': 'order_55', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 14:09:00'), 'price': 523.25}
2025-05-08 11:21:14,790 - __main__ - DEBUG - FILL: {'id': 'fill_order_55', 'order_id': 'order_55', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.3, 'timestamp': Timestamp('2024-03-28 14:08:00'), 'commission': 52.32999999999999}
2025-05-08 11:21:14,792 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.2899, 'timestamp': Timestamp('2024-03-28 14:28:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,792 - __main__ - DEBUG - ORDER: {'id': 'order_56', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 14:28:00'), 'price': 523.2899}
2025-05-08 11:21:14,792 - __main__ - DEBUG - FILL: {'id': 'fill_order_56', 'order_id': 'order_56', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.19, 'timestamp': Timestamp('2024-03-28 14:27:00'), 'commission': 52.31900000000001}
2025-05-08 11:21:14,794 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.31, 'timestamp': Timestamp('2024-03-28 15:03:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,794 - __main__ - DEBUG - ORDER: {'id': 'order_57', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 15:03:00'), 'price': 523.31}
2025-05-08 11:21:14,794 - __main__ - DEBUG - FILL: {'id': 'fill_order_57', 'order_id': 'order_57', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.36, 'timestamp': Timestamp('2024-03-28 15:02:00'), 'commission': 52.336}
2025-05-08 11:21:14,794 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.575, 'timestamp': Timestamp('2024-03-28 15:05:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,794 - __main__ - DEBUG - ORDER: {'id': 'order_58', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 15:05:00'), 'price': 523.575}
2025-05-08 11:21:14,794 - __main__ - DEBUG - FILL: {'id': 'fill_order_58', 'order_id': 'order_58', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.43, 'timestamp': Timestamp('2024-03-28 15:04:00'), 'commission': 52.342999999999996}
2025-05-08 11:21:14,795 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.25, 'timestamp': Timestamp('2024-03-28 15:07:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,795 - __main__ - DEBUG - ORDER: {'id': 'order_59', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 15:07:00'), 'price': 523.25}
2025-05-08 11:21:14,795 - __main__ - DEBUG - FILL: {'id': 'fill_order_59', 'order_id': 'order_59', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.395, 'timestamp': Timestamp('2024-03-28 15:06:00'), 'commission': 52.3395}
2025-05-08 11:21:14,795 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.5, 'timestamp': Timestamp('2024-03-28 15:16:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,795 - __main__ - DEBUG - ORDER: {'id': 'order_60', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 15:16:00'), 'price': 523.5}
2025-05-08 11:21:14,795 - __main__ - DEBUG - FILL: {'id': 'fill_order_60', 'order_id': 'order_60', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.4699, 'timestamp': Timestamp('2024-03-28 15:15:00'), 'commission': 52.346990000000005}
2025-05-08 11:21:14,797 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.415, 'timestamp': Timestamp('2024-03-28 15:36:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,797 - __main__ - DEBUG - ORDER: {'id': 'order_61', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 15:36:00'), 'price': 523.415}
2025-05-08 11:21:14,797 - __main__ - DEBUG - FILL: {'id': 'fill_order_61', 'order_id': 'order_61', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.475, 'timestamp': Timestamp('2024-03-28 15:35:00'), 'commission': 52.347500000000004}
2025-05-08 11:21:14,798 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.55, 'timestamp': Timestamp('2024-03-28 15:51:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,798 - __main__ - DEBUG - ORDER: {'id': 'order_62', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 15:51:00'), 'price': 523.55}
2025-05-08 11:21:14,798 - __main__ - DEBUG - FILL: {'id': 'fill_order_62', 'order_id': 'order_62', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.48, 'timestamp': Timestamp('2024-03-28 15:50:00'), 'commission': 52.348}
2025-05-08 11:21:14,799 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.485, 'timestamp': Timestamp('2024-03-28 16:04:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,799 - __main__ - DEBUG - ORDER: {'id': 'order_63', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 16:04:00'), 'price': 523.485}
2025-05-08 11:21:14,799 - __main__ - DEBUG - FILL: {'id': 'fill_order_63', 'order_id': 'order_63', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.45, 'timestamp': Timestamp('2024-03-28 16:03:00'), 'commission': 52.345000000000006}
2025-05-08 11:21:14,800 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.47, 'timestamp': Timestamp('2024-03-28 16:29:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,800 - __main__ - DEBUG - ORDER: {'id': 'order_64', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 16:29:00'), 'price': 523.47}
2025-05-08 11:21:14,800 - __main__ - DEBUG - FILL: {'id': 'fill_order_64', 'order_id': 'order_64', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.364, 'timestamp': Timestamp('2024-03-28 16:28:00'), 'commission': 52.336400000000005}
2025-05-08 11:21:14,801 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.19, 'timestamp': Timestamp('2024-03-28 16:32:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,801 - __main__ - DEBUG - ORDER: {'id': 'order_65', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 16:32:00'), 'price': 523.19}
2025-05-08 11:21:14,801 - __main__ - DEBUG - FILL: {'id': 'fill_order_65', 'order_id': 'order_65', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.15, 'timestamp': Timestamp('2024-03-28 16:31:00'), 'commission': 52.315}
2025-05-08 11:21:14,802 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.25, 'timestamp': Timestamp('2024-03-28 16:48:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,802 - __main__ - DEBUG - ORDER: {'id': 'order_66', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 16:48:00'), 'price': 523.25}
2025-05-08 11:21:14,802 - __main__ - DEBUG - FILL: {'id': 'fill_order_66', 'order_id': 'order_66', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.27, 'timestamp': Timestamp('2024-03-28 16:47:00'), 'commission': 52.327}
2025-05-08 11:21:14,803 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.145, 'timestamp': Timestamp('2024-03-28 17:01:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,803 - __main__ - DEBUG - ORDER: {'id': 'order_67', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 17:01:00'), 'price': 523.145}
2025-05-08 11:21:14,803 - __main__ - DEBUG - FILL: {'id': 'fill_order_67', 'order_id': 'order_67', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.21, 'timestamp': Timestamp('2024-03-28 17:00:00'), 'commission': 52.321}
2025-05-08 11:21:14,803 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.3, 'timestamp': Timestamp('2024-03-28 17:03:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,803 - __main__ - DEBUG - ORDER: {'id': 'order_68', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 17:03:00'), 'price': 523.3}
2025-05-08 11:21:14,803 - __main__ - DEBUG - FILL: {'id': 'fill_order_68', 'order_id': 'order_68', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.22, 'timestamp': Timestamp('2024-03-28 17:02:00'), 'commission': 52.322}
2025-05-08 11:21:14,803 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.244, 'timestamp': Timestamp('2024-03-28 17:04:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,803 - __main__ - DEBUG - ORDER: {'id': 'order_69', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 17:04:00'), 'price': 523.244}
2025-05-08 11:21:14,803 - __main__ - DEBUG - FILL: {'id': 'fill_order_69', 'order_id': 'order_69', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'price': 523.3, 'timestamp': Timestamp('2024-03-28 17:03:00'), 'commission': 52.32999999999999}
2025-05-08 11:21:14,803 - __main__ - DEBUG - SIGNAL: {'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.44, 'timestamp': Timestamp('2024-03-28 17:05:00'), 'order_type': 'MARKET'}
2025-05-08 11:21:14,803 - __main__ - DEBUG - ORDER: {'id': 'order_70', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'order_type': 'MARKET', 'status': 'CREATED', 'timestamp': Timestamp('2024-03-28 17:05:00'), 'price': 523.44}
2025-05-08 11:21:14,803 - __main__ - DEBUG - FILL: {'id': 'fill_order_70', 'order_id': 'order_70', 'symbol': 'TEST', 'direction': 'LONG', 'quantity': 100, 'price': 523.244, 'timestamp': Timestamp('2024-03-28 17:04:00'), 'commission': 52.324400000000004}


Parameter space has 30 combinations:
  1: {'fast_period': 5, 'slow_period': 20}
  2: {'fast_period': 5, 'slow_period': 40}
  3: {'fast_period': 5, 'slow_period': 60}
  4: {'fast_period': 5, 'slow_period': 80}
  5: {'fast_period': 5, 'slow_period': 100}
  6: {'fast_period': 10, 'slow_period': 20}
  7: {'fast_period': 10, 'slow_period': 40}
  8: {'fast_period': 10, 'slow_period': 60}
  9: {'fast_period': 10, 'slow_period': 80}
  10: {'fast_period': 10, 'slow_period': 100}
  11: {'fast_period': 15, 'slow_period': 20}
  12: {'fast_period': 15, 'slow_period': 40}
  13: {'fast_period': 15, 'slow_period': 60}
  14: {'fast_period': 15, 'slow_period': 80}
  15: {'fast_period': 15, 'slow_period': 100}
  16: {'fast_period': 20, 'slow_period': 20}
  17: {'fast_period': 20, 'slow_period': 40}
  18: {'fast_period': 20, 'slow_period': 60}
  19: {'fast_period': 20, 'slow_period': 80}
  20: {'fast_period': 20, 'slow_period': 100}
  21: {'fast_period': 25, 'slow_period': 20}
  22: {'fast_period': 25, 'slow_period': 40}
  23: {'fast_period': 25, 'slow_period': 60}
  24: {'fast_period': 25, 'slow_period': 80}
  25: {'fast_period': 25, 'slow_period': 100}
  26: {'fast_period': 30, 'slow_period': 20}
  27: {'fast_period': 30, 'slow_period': 40}
  28: {'fast_period': 30, 'slow_period': 60}
  29: {'fast_period': 30, 'slow_period': 80}
  30: {'fast_period': 30, 'slow_period': 100}

Testing ratio split method:
  Train data: 70 rows (2020-01-01 00:00:00 to 2020-03-10 00:00:00)
  Test data:  30 rows (2020-03-11 00:00:00 to 2020-04-09 00:00:00)

Testing date split method:
  Train data: 70 rows (2020-01-01 00:00:00 to 2020-03-10 00:00:00)
  Test data:  30 rows (2020-03-11 00:00:00 to 2020-04-09 00:00:00)

Testing fixed split method:
  Train data: 70 rows (2020-01-01 00:00:00 to 2020-03-10 00:00:00)
  Test data:  30 rows (2020-03-11 00:00:00 to 2020-04-09 00:00:00)

Backtest Results:
Initial Capital: 100000.0
Final Equity: 0
Return: 0.00%
Sharpe Ratio: 0.0000
Total Trades: 35

Sample Trades:
Trade 1: {'id': 'trade_fill_order_1', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'entry_price': 521.0069, 'entry_time': Timestamp('2024-03-26 13:53:00'), 'closed': True, 'related_order_ids': ['order_1'], 'close_price': 521.125, 'close_time': Timestamp('2024-03-26 13:57:00'), 'pnl': -11.810000000002674, 'closed_quantity': 100}
Trade 2: {'id': 'trade_fill_order_3', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'entry_price': 521.3001, 'entry_time': Timestamp('2024-03-26 14:13:00'), 'closed': True, 'related_order_ids': ['order_3'], 'close_price': 521.33, 'close_time': Timestamp('2024-03-26 14:14:00'), 'pnl': -2.9899999999997817, 'closed_quantity': 100}
Trade 3: {'id': 'trade_fill_order_5', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'entry_price': 521.2, 'entry_time': Timestamp('2024-03-26 14:27:00'), 'closed': True, 'related_order_ids': ['order_5'], 'close_price': 521.06, 'close_time': Timestamp('2024-03-26 14:42:00'), 'pnl': 14.000000000010004, 'closed_quantity': 100}
Trade 4: {'id': 'trade_fill_order_7', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'entry_price': 521.09, 'entry_time': Timestamp('2024-03-26 14:51:00'), 'closed': True, 'related_order_ids': ['order_7'], 'close_price': 521.08, 'close_time': Timestamp('2024-03-26 14:52:00'), 'pnl': 0.9999999999990905, 'closed_quantity': 100}
Trade 5: {'id': 'trade_fill_order_9', 'symbol': 'TEST', 'direction': 'SHORT', 'quantity': 100, 'entry_price': 521.2, 'entry_time': Timestamp('2024-03-26 15:13:00'), 'closed': True, 'related_order_ids': ['order_9'], 'close_price': 521.1801, 'close_time': Timestamp('2024-03-26 15:20:00'), 'pnl': 1.9900000000006912, 'closed_quantity': 100}

Analyzing optimization log: optimize_ma_crossover.log
Found potential issue: 'Error' in log

Error context:
            max_evaluations=100  # Limit evaluations for example
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 169, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    
Found potential issue: 'AttributeError' in log

Error context:
            max_evaluations=100  # Limit evaluations for example
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 169, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    

Analyzing optimization log: optimize_strategy.log
Found potential issue: 'Error' in log

Error context:
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 169, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
        ...<3 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 435, in run_with_optimization
>>>     raise BacktestError(f"Optimization failed: {e}")
    src.core.exceptions.BacktestError: Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    2025-05-05 17:30:32,920 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:30:32,921 [ERROR] Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    2025-05-05 17:30:32,921 [ERROR] Optimization failed: Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'

Error context:
        ...<3 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 435, in run_with_optimization
        raise BacktestError(f"Optimization failed: {e}")
>>> src.core.exceptions.BacktestError: Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    2025-05-05 17:30:32,920 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:30:32,921 [ERROR] Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    2025-05-05 17:30:32,921 [ERROR] Optimization failed: Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    Traceback (most recent call last):

Error context:
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 169, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
        ...<3 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 435, in run_with_optimization
>>>     raise BacktestError(f"Optimization failed: {e}")
    src.core.exceptions.BacktestError: Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    2025-05-05 17:37:09,136 [INFO] Starting strategy optimization
    2025-05-05 17:37:09,137 [INFO] Logging initialized at level INFO
    2025-05-05 17:37:09,137 [INFO] Log file: backtest.log

Error context:
        ...<3 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 435, in run_with_optimization
        raise BacktestError(f"Optimization failed: {e}")
>>> src.core.exceptions.BacktestError: Optimization failed: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    2025-05-05 17:37:09,136 [INFO] Starting strategy optimization
    2025-05-05 17:37:09,137 [INFO] Logging initialized at level INFO
    2025-05-05 17:37:09,137 [INFO] Log file: backtest.log
    2025-05-05 17:37:09,139 [INFO] Loaded configuration from config/head_test.yaml

Error context:
            strategy_name=strategy_name,
            method=optimization_method,
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 199, in optimize_strategy
>>>     raise OptimizationError(f"Strategy not found: {strategy_name}")
    src.core.exceptions.OptimizationError: Strategy not found: ma_crossover
    
    During handling of the above exception, another exception occurred:
    

Error context:
            method=optimization_method,
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 199, in optimize_strategy
        raise OptimizationError(f"Strategy not found: {strategy_name}")
>>> src.core.exceptions.OptimizationError: Strategy not found: ma_crossover
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 465, in run_with_optimization
>>>     raise BacktestError(f"Optimization failed: {e}")
    src.core.exceptions.BacktestError: Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:28,106 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:37:28,107 [ERROR] Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:28,107 [ERROR] Optimization failed: Optimization failed: Strategy not found: ma_crossover

Error context:
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 465, in run_with_optimization
        raise BacktestError(f"Optimization failed: {e}")
>>> src.core.exceptions.BacktestError: Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:28,106 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:37:28,107 [ERROR] Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:28,107 [ERROR] Optimization failed: Optimization failed: Strategy not found: ma_crossover
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
            method=optimization_method,
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 199, in optimize_strategy
>>>     raise OptimizationError(f"Strategy not found: {strategy_name}")
    src.core.exceptions.OptimizationError: Strategy not found: ma_crossover
    
    During handling of the above exception, another exception occurred:
    

Error context:
            method=optimization_method,
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 199, in optimize_strategy
        raise OptimizationError(f"Strategy not found: {strategy_name}")
>>> src.core.exceptions.OptimizationError: Strategy not found: ma_crossover
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 465, in run_with_optimization
>>>     raise BacktestError(f"Optimization failed: {e}")
    src.core.exceptions.BacktestError: Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:45,129 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:37:45,130 [ERROR] Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:45,130 [ERROR] Optimization failed: Optimization failed: Strategy not found: ma_crossover

Error context:
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 465, in run_with_optimization
        raise BacktestError(f"Optimization failed: {e}")
>>> src.core.exceptions.BacktestError: Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:45,129 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:37:45,130 [ERROR] Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:37:45,130 [ERROR] Optimization failed: Optimization failed: Strategy not found: ma_crossover
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
            method=optimization_method,
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 199, in optimize_strategy
>>>     raise OptimizationError(f"Strategy not found: {strategy_name}")
    src.core.exceptions.OptimizationError: Strategy not found: ma_crossover
    
    During handling of the above exception, another exception occurred:
    

Error context:
            method=optimization_method,
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 199, in optimize_strategy
        raise OptimizationError(f"Strategy not found: {strategy_name}")
>>> src.core.exceptions.OptimizationError: Strategy not found: ma_crossover
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 465, in run_with_optimization
>>>     raise BacktestError(f"Optimization failed: {e}")
    src.core.exceptions.BacktestError: Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:49:02,826 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:49:02,827 [ERROR] Optimization failed: 'ConfigSection' object has no attribute 'keys'
    2025-05-05 17:49:02,827 [ERROR] Optimization failed: Optimization failed: 'ConfigSection' object has no attribute 'keys'

Error context:
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 465, in run_with_optimization
        raise BacktestError(f"Optimization failed: {e}")
>>> src.core.exceptions.BacktestError: Optimization failed: Strategy not found: ma_crossover
    2025-05-05 17:49:02,826 [WARNING] Data handler does not support train/test splitting
    2025-05-05 17:49:02,827 [ERROR] Optimization failed: 'ConfigSection' object has no attribute 'keys'
    2025-05-05 17:49:02,827 [ERROR] Optimization failed: Optimization failed: 'ConfigSection' object has no attribute 'keys'
    Traceback (most recent call last):

Error context:
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 244, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 190, in get_strategy_by_name
        logger.info(f"Strategies in config: {strategies_config.keys()}")
                                             ^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'ConfigSection' object has no attribute 'keys'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 512, in run_with_optimization
>>>     raise BacktestError(f"Optimization failed: {e}")
    src.core.exceptions.BacktestError: Optimization failed: 'ConfigSection' object has no attribute 'keys'
    2025-05-05 17:53:48,846 [INFO] Starting strategy optimization
    2025-05-05 17:53:48,847 [INFO] Logging initialized at level INFO
    2025-05-05 17:53:48,847 [INFO] Log file: backtest.log

Error context:
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 512, in run_with_optimization
        raise BacktestError(f"Optimization failed: {e}")
>>> src.core.exceptions.BacktestError: Optimization failed: 'ConfigSection' object has no attribute 'keys'
    2025-05-05 17:53:48,846 [INFO] Starting strategy optimization
    2025-05-05 17:53:48,847 [INFO] Logging initialized at level INFO
    2025-05-05 17:53:48,847 [INFO] Log file: backtest.log
    2025-05-05 17:53:48,848 [INFO] Loaded configuration from config/head_test.yaml

Error context:
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 244, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 190, in get_strategy_by_name
        logger.info(f"Strategies in config: {strategies_config.keys()}")
                                             ^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'ConfigSection' object has no attribute 'keys'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            strategy_name=strategy_name,
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 512, in run_with_optimization
>>>     raise BacktestError(f"Optimization failed: {e}")
    src.core.exceptions.BacktestError: Optimization failed: 'ConfigSection' object has no attribute 'keys'
    

Error context:
        ...<4 lines>...
            **opt_kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 512, in run_with_optimization
        raise BacktestError(f"Optimization failed: {e}")
>>> src.core.exceptions.BacktestError: Optimization failed: 'ConfigSection' object has no attribute 'keys'
    
Found potential issue: 'AttributeError' in log

Error context:
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 169, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
            **kwargs
        )
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 169, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'OptimizingBacktestCoordinator' object has no attribute 'get_strategy_by_name'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 244, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 190, in get_strategy_by_name
        logger.info(f"Strategies in config: {strategies_config.keys()}")
                                             ^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'ConfigSection' object has no attribute 'keys'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Error context:
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 244, in optimize_strategy
        strategy = self.get_strategy_by_name(strategy_name)
      File "/Users/daws/ADMF-trader/src/execution/backtest/optimizing_backtest.py", line 190, in get_strategy_by_name
        logger.info(f"Strategies in config: {strategies_config.keys()}")
                                             ^^^^^^^^^^^^^^^^^^^^^^
>>> AttributeError: 'ConfigSection' object has no attribute 'keys'
    
    During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):

Found 2 result files to analyze.

Analyzing ./optimization_results/simple_ma_crossover_optimization_20250508_111612.json:
  Train trades: 0
  Test trades: 0

Analyzing ./optimization_results/simple_ma_crossover_optimization_20250508_111251.json:
  Train trades: 0
  Test trades: 0

Examining optimization config: config/ma_crossover_optimization.yaml
Strategy: simple_ma_crossover
Parameter space: [{'name': 'fast_period', 'type': 'integer', 'min': 5, 'max': 30, 'step': 5}, {'name': 'slow_period', 'type': 'integer', 'min': 20, 'max': 100, 'step': 20}]
Objective function: sharpe_ratio
Data sources: [{'symbol': 'HEAD', 'file': 'data/HEAD_1min.csv', 'date_column': 'timestamp', 'date_format': '%Y-%m-%d %H:%M:%S'}]

================================================================================
Debug complete. Check debug_output directory for results.
================================================================================
